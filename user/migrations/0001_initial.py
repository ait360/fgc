# Generated by Django 2.1 on 2019-09-30 15:02

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import user.models
import user.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('display_picture', models.ImageField(blank=True, upload_to=user.models.user_directory_path)),
                ('cover_picture', models.ImageField(blank=True, upload_to=user.models.user_cover_path)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts', verbose_name='active')),
                ('is_boss', models.BooleanField(default=False, help_text='Designates whether this user should be treated as a site boss', verbose_name='Boss')),
                ('is_member', models.BooleanField(default=False, help_text='Designates whether this user should be treated as a site member', verbose_name='Member')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', user.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Required for first name of alumnus', max_length=150, verbose_name='your first name')),
                ('last_name', models.CharField(help_text='Required for last name of alumnus', max_length=150, verbose_name='your last name')),
                ('current_state', models.CharField(choices=[('AB', 'Abia'), ('AD', 'Adamawa'), ('AI', 'Akwa Ibom'), ('AN', 'Anambra'), ('BA', 'Bauchi'), ('BAY', 'Bayelsa'), ('BE', 'Benue'), ('BO', 'Borno'), ('CR', 'Cross River'), ('DE', 'Delta'), ('EB', 'Ebonyi'), ('ED', 'Edo'), ('EK', 'Ekiti'), ('EN', 'Enugu'), ('GO', 'Gombe'), ('IM', 'Imo'), ('JI', 'Jigawa'), ('KA', 'Kaduna'), ('KAN', 'Kano'), ('KAT', 'Katsina'), ('KE', 'Kebbi'), ('KO', 'Kogi'), ('KW', 'Kwara'), ('LA', 'Lagos'), ('NA', 'Nasarawa'), ('NI', 'Niger'), ('OG', 'Ogun'), ('ON', 'Ondo'), ('OS', 'Osun'), ('OY', 'Oyo'), ('PL', 'Plateau'), ('RI', 'Rivers'), ('SO', 'Sokoto'), ('TA', 'Taraba'), ('YO', 'Yobe'), ('ZA', 'Zamfara'), ('FCT', 'FCT Abuja')], max_length=3, verbose_name='your current state')),
                ('current_city', models.CharField(help_text='Required for current city of alumnus', max_length=150, verbose_name='your current city/town')),
                ('WhatsApp_phone_number', models.CharField(error_messages={'unique': 'A user with that phone number already exists.'}, help_text='Required for WhatsApp Phone number', max_length=11, unique=True, validators=[user.validators.PhoneNumberValidator()], verbose_name='your WhatsApp Phone number')),
                ('address', models.CharField(help_text='Required for easy contact', max_length=255, verbose_name='member address')),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('bio', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
